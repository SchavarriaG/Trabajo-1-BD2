set serveroutput on

-- creamos la tabla de prueba
CREATE TABLE proveedor(
    codpv NUMBER(8) PRIMARY KEY,
    nompv VARCHAR2(10) NOT NULL );

INSERT INTO proveedor VALUES(10, 'Lisy'); 
INSERT INTO proveedor VALUES(20, 'Kirsty');
INSERT INTO proveedor VALUES(30, 'Bjorky');
INSERT INTO proveedor VALUES(40, 'Wimpy');
INSERT INTO proveedor VALUES(50, 'Chucky');
INSERT INTO proveedor VALUES(60, 'Chubby');
    
CREATE TABLE venta(
    idv NUMBER(8) PRIMARY KEY,
    codpv NUMBER(8) REFERENCES proveedor NOT NULL,
    codproducto NUMBER(8) NOT NULL
);

INSERT INTO venta VALUES(3	,10	,	1); 
INSERT INTO venta VALUES(5	,10	,	2); 
INSERT INTO venta VALUES(7	,10	,	5); 
INSERT INTO venta VALUES(17	,10	,	2); 
INSERT INTO venta VALUES(8	,20	,	2); 
INSERT INTO venta VALUES(1	,20	,	1); 
INSERT INTO venta VALUES(9	,20	,	5); 
INSERT INTO venta VALUES(31	,20	,	1); 
INSERT INTO venta VALUES(33	,20	,	1); 
INSERT INTO venta VALUES(10	,30	,	1); 
INSERT INTO venta VALUES(11	,30	,	2); 
INSERT INTO venta VALUES(12	,40	,	2); 
INSERT INTO venta VALUES(2	,40	,	1); 
INSERT INTO venta VALUES(22	,40	,	2); 
INSERT INTO venta VALUES(28	,50	,	2); 
INSERT INTO venta VALUES(21	,50	,	1); 
INSERT INTO venta VALUES(29	,50	,	5); 
INSERT INTO venta VALUES(99	,60	,	2); 


CREATE OR REPLACE PROCEDURE generador1 (n IN NUMBER) IS
num NUMBER(8):= n-1;
begin

DBMS_OUTPUT.PUT_LINE(num);
end;
/



DROP TABLE tablaaux;
CREATE TABLE tablaaux AS 
SELECT DISTINCT nompv, proveedor.codpv, venta.codproducto 
FROM proveedor, venta 
WHERe proveedor.codpv = venta.codpv 
ORDER BY codpv;

DROP TABLE tablaaux2; 
COLUMN codprod FORMAT A50
CREATE TABLE tablaaux2 AS 
SELECT codpv, LISTAGG(codproducto, ',') WITHIN GROUP (ORDER BY codproducto) AS codprod
FROM   tablaaux
GROUP BY codpv;


DECLARE
    TYPE arreglo IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    codigos arreglo;



    FOR i IN 

BEGIN 
    IF codigos.COUNT >= n then


    end if;



CREATE OR REPLACE FUNCTION generador (combinacion IN OUT arreglo ,inicio IN NUMBER, fin IN NUMBER, ind IN NUMBER) 
    RETURN arreglo IS

    BEGIN

        IF ind = combinacion.COUNT then
            RETURN combinacion;
        ELSIF (inicio <= fin) then
            combinacion(ind):= inicio;
            generador(combinacion, inicio+1 , fin, ind+1);
            generador(combinacion, inicio+1 , fin, ind);
        END IF;
       
    END;



 DECLARE
    TYPE arreglo IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    codigos arreglo;
  
  
  
  
  begin
    codigos(0):=0;
  DBMS_OUTPUT.PUT_LINE(combinacion(codigos,0,3,0));
  end;
  /

CREATE PACKAGE paquete1 IS
  TYPE arreglo IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  FUNCTION generador (combinacion IN OUT arreglo ,inicio IN NUMBER, fin IN NUMBER, ind IN NUMBER) 
    RETURN arreglo;
END;



CREATE OR REPLACE PACKAGE BODY paquete1 IS
    FUNCTION generador (combinacion IN OUT arreglo ,inicio IN NUMBER, fin IN NUMBER, ind IN NUMBER) 
    RETURN arreglo IS
    BEGIN

        IF ind = combinacion.COUNT then
            RETURN combinacion;
        ELSIF (inicio <= fin) then
            combinacion(ind):= inicio;
            generador(combinacion, inicio+1 , fin, ind+1);
            generador(combinacion, inicio+1 , fin, ind);
        END IF;
       
    END;
END;


create  type arreglo is varray(2) of number;










--DECLARE
--contador NUMBER(8) := 20;

--DBMS_OUTPUT.PUT_LINE('Hola mundo ' || contador);
--exception
--  when no_data_found then
--    ; 




NOMPV      CODPROD
---------- --------------------------------------------------
10 Bjorky     1,2
20 Chubby     2
30 Chucky     1,2,5
40 Kirsty     1,2,5
50 Lisy       1,2,5
60 Wimpy      1,2,5


30,40,50
30,40,60
30,50,60
40,50,60

n=4 r =3


24 / (1)(6)

[50 (Chucky), 20 (Kirsty)] --> {1,2,5}

